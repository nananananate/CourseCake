{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"There are three main features CourseCake offers that make university course information more \"edible\" for developers: \ud83c\udf10 Web API (REST + GraphQL) coursecake.tisuela.com/api/v1 - docs \ud83d\udcbe Database package - docs \ud83d\udd0d Scraper package - docs CourseCake aims to create an API to access course data, where college course information is unified by our schemas. By making course \ud83d\udcda data easier to responsibly access and more \"edible\" \ud83c\udf70 for developers, we hope CourseCake gives a smooth approach to build useful tools for students. Recent Changes \ud83d\udc34 Support for Calpoly \ud83d\udc0c Support for UCSC via SlugSurvival \ud83d\udcda\ud83d\udcdd Separation of the Course Schema into a smaller Course Schema and a Class Schema. A Class is an offering of a Course \ud83d\udcc8 Implementing a GraphQL endpoint using Graphene. Cal Poly \ud83d\udc34 Create course discovery applications faster Seeking to aid applications like CollegeFlows and PolyFlowBuilder , we hope that CourseCake encourages innovation among students at Cal Poly San Luis Obispo. UC Santa Cruz \ud83d\udc0c Getting course information is piece of banana cake. UC Santa Cruz course data is provided by SlugSurvival's API . They have a pretty cool course planning app, check it out . Y'all have a neat-lookin campus -- I hope CourseCake helps y'all continue to code neat-lookin apps. If you need more features from CourseCake, feel free to open up an issue. I'm always open for help too! Scroll down for cool things to jump in on. UC Irvine \ud83d\udc1c Zot your courses easier and responsibly The motivation of CourseCake is to make it easier to develop tools like AntPlanner and Antscoper, and promote a responsible use of WebSoc by not abusing its resources. All of the latest scraped data is stored in our database, which avoids congesting WebSoc and allows successful requests even when WebSoc is down. Where's my university? \ud83e\udd37\u200d\u2642\ufe0f Open up an issue ! If there's enough of a need, I'm down to add support for your school. If you'd like to help code a scraper or have an API to provide, let me know . Documentation \ud83c\udf10 Web API \ud83d\udcbe Database \ud83d\udd0d Scrapers Installation \ud83d\udc69\u200d\ud83d\udc67 Clone repository git clone https://github.com/nananananate/CourseCake cd CourseCake \ud83d\udc0d Create Python virtual environment There are a good amount of depencies for this project -- it will be good practice to use a virtual environment, albeit not necessary. On macOS and Linux: python3 -m virtualenv env On Windows: python -m venv env The second argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env. \u2705 Activate virtual environment On macOS and Linux: source env/bin/activate On Windows Command Line: .\\env\\Scripts\\activate.bat One Windows Powershell .\\env\\Scripts\\activate.ps1 \ud83d\udce6 Navigate to the repository folder and install packages python -m pip install -r requirements.txt \ud83c\udfc3\u200d\u2640\ufe0f Deploy Fast API Application locally We are no longer using Flask! \ud83e\udd84 Run Fast API using uvicorn Install uvicorn if you haven't already (if you followed the previous step correctly, you should be gucci. python -m pip install uvicorn Run uvicorn. uvicorn coursecake.fastapi_app.main:app --reload You\u2019ll see output similar to this: \u2190[32mINFO\u2190[0m: Uvicorn running on \u2190[1mhttp://127.0.0.1:8000\u2190[0m (Press CTRL+C to quit) \u2190[32mINFO\u2190[0m: Started reloader process [\u2190[36m\u2190[1m38240\u2190[0m] using \u2190[36m\u2190[1mstatreload\u2190[0m \u2190[32mINFO\u2190[0m: Started server process [\u2190[36m13020\u2190[0m] \u2190[32mINFO\u2190[0m: Waiting for application startup. \u2190[32mINFO\u2190[0m: Application startup complete. donezo Future features Things I'm working on! Open up an issue to suggest features or request to help out! I'm down to guide you in webscraping, using SQLAlchemy, or general back-end web development in Python :D Adding instructor ratings from Rate My Professor via ratemyprof-api Prerequisite mapping (AND visualization!) to create a network of classes (along with a node graph GUI) via Neo4j (probably in seperate repository).","title":"Home"},{"location":"#recent-changes","text":"\ud83d\udc34 Support for Calpoly \ud83d\udc0c Support for UCSC via SlugSurvival \ud83d\udcda\ud83d\udcdd Separation of the Course Schema into a smaller Course Schema and a Class Schema. A Class is an offering of a Course \ud83d\udcc8 Implementing a GraphQL endpoint using Graphene.","title":"Recent Changes"},{"location":"#cal-poly","text":"\ud83d\udc34 Create course discovery applications faster Seeking to aid applications like CollegeFlows and PolyFlowBuilder , we hope that CourseCake encourages innovation among students at Cal Poly San Luis Obispo.","title":"Cal Poly"},{"location":"#uc-santa-cruz","text":"\ud83d\udc0c Getting course information is piece of banana cake. UC Santa Cruz course data is provided by SlugSurvival's API . They have a pretty cool course planning app, check it out . Y'all have a neat-lookin campus -- I hope CourseCake helps y'all continue to code neat-lookin apps. If you need more features from CourseCake, feel free to open up an issue. I'm always open for help too! Scroll down for cool things to jump in on.","title":"UC Santa Cruz"},{"location":"#uc-irvine","text":"\ud83d\udc1c Zot your courses easier and responsibly The motivation of CourseCake is to make it easier to develop tools like AntPlanner and Antscoper, and promote a responsible use of WebSoc by not abusing its resources. All of the latest scraped data is stored in our database, which avoids congesting WebSoc and allows successful requests even when WebSoc is down.","title":"UC Irvine"},{"location":"#wheres-my-university","text":"Open up an issue ! If there's enough of a need, I'm down to add support for your school. If you'd like to help code a scraper or have an API to provide, let me know .","title":"Where's my university? \ud83e\udd37\u200d\u2642\ufe0f"},{"location":"#documentation","text":"\ud83c\udf10 Web API \ud83d\udcbe Database \ud83d\udd0d Scrapers","title":"Documentation"},{"location":"#installation","text":"\ud83d\udc69\u200d\ud83d\udc67 Clone repository git clone https://github.com/nananananate/CourseCake cd CourseCake \ud83d\udc0d Create Python virtual environment There are a good amount of depencies for this project -- it will be good practice to use a virtual environment, albeit not necessary. On macOS and Linux: python3 -m virtualenv env On Windows: python -m venv env The second argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env. \u2705 Activate virtual environment On macOS and Linux: source env/bin/activate On Windows Command Line: .\\env\\Scripts\\activate.bat One Windows Powershell .\\env\\Scripts\\activate.ps1 \ud83d\udce6 Navigate to the repository folder and install packages python -m pip install -r requirements.txt \ud83c\udfc3\u200d\u2640\ufe0f Deploy Fast API Application locally We are no longer using Flask! \ud83e\udd84 Run Fast API using uvicorn Install uvicorn if you haven't already (if you followed the previous step correctly, you should be gucci. python -m pip install uvicorn Run uvicorn. uvicorn coursecake.fastapi_app.main:app --reload You\u2019ll see output similar to this: \u2190[32mINFO\u2190[0m: Uvicorn running on \u2190[1mhttp://127.0.0.1:8000\u2190[0m (Press CTRL+C to quit) \u2190[32mINFO\u2190[0m: Started reloader process [\u2190[36m\u2190[1m38240\u2190[0m] using \u2190[36m\u2190[1mstatreload\u2190[0m \u2190[32mINFO\u2190[0m: Started server process [\u2190[36m13020\u2190[0m] \u2190[32mINFO\u2190[0m: Waiting for application startup. \u2190[32mINFO\u2190[0m: Application startup complete. donezo","title":"Installation"},{"location":"#future-features","text":"Things I'm working on! Open up an issue to suggest features or request to help out! I'm down to guide you in webscraping, using SQLAlchemy, or general back-end web development in Python :D Adding instructor ratings from Rate My Professor via ratemyprof-api Prerequisite mapping (AND visualization!) to create a network of classes (along with a node graph GUI) via Neo4j (probably in seperate repository).","title":"Future features"},{"location":"Database/","text":"UNDER CONSTRUCTION, SORRYY if u need info desperately, there are random comments and docstrings in the code You can programmatically upload and query courses from the database. The coursecake.database package uses sqlalchemy to insert, update, and query courses from the local sqlite database. Structure database.crud - Create, Read, Update, and Delete functions are here. The classes for dynamically creating queries ( CourseQuery and ClassQuery ) are here database.models - The two main models, Course and Class are defined here. All other models are here. database.sql - All connections made to the database are imported from here. Configurations for connections are defined here. database.uploads - Functions to populate the database are defined here. This is the ONLY file that talks to the coursecake.scrapers package. Upload courses & classes coursecake.database uses coursecake.scrapers to scrape courses for insertion into the database. All upload functions are in coursecake.database.uploads . Here's a script that uploads courses. from coursecake.database import uploads, sql db = sql.SessionLocal() uploads.update_all(db) Query Courses Queries to the Course table can be made dynamically from a dictionary using our class CourseQuery from coursecake.database.crud . from coursecake.database import crud, sql db = sql.SessionLocal() query_params = { \"department[like]\": \"compsci\", \"title[not]\": \"intro to bad course\", \"units\": \"4\" } query = crud.CourseQuery(db, university = \"uci\", args = query_params)","title":"Database"},{"location":"Database/#under-construction-sorryy","text":"if u need info desperately, there are random comments and docstrings in the code You can programmatically upload and query courses from the database. The coursecake.database package uses sqlalchemy to insert, update, and query courses from the local sqlite database.","title":"UNDER CONSTRUCTION, SORRYY"},{"location":"Database/#structure","text":"database.crud - Create, Read, Update, and Delete functions are here. The classes for dynamically creating queries ( CourseQuery and ClassQuery ) are here database.models - The two main models, Course and Class are defined here. All other models are here. database.sql - All connections made to the database are imported from here. Configurations for connections are defined here. database.uploads - Functions to populate the database are defined here. This is the ONLY file that talks to the coursecake.scrapers package.","title":"Structure"},{"location":"Database/#upload-courses-classes","text":"coursecake.database uses coursecake.scrapers to scrape courses for insertion into the database. All upload functions are in coursecake.database.uploads . Here's a script that uploads courses. from coursecake.database import uploads, sql db = sql.SessionLocal() uploads.update_all(db)","title":"Upload courses &amp; classes"},{"location":"Database/#query-courses","text":"Queries to the Course table can be made dynamically from a dictionary using our class CourseQuery from coursecake.database.crud . from coursecake.database import crud, sql db = sql.SessionLocal() query_params = { \"department[like]\": \"compsci\", \"title[not]\": \"intro to bad course\", \"units\": \"4\" } query = crud.CourseQuery(db, university = \"uci\", args = query_params)","title":"Query Courses"},{"location":"GraphQL/","text":"coursecake.tisuela.com/api/graphql What is GraphQL ? \ud83d\udcc8 GraphQL is a query language for APIs. It allows for more dynamic, specific queries, helping CourseCake give you the information you need. However, the kind of requests you will have to make are more complex. New to GraphQL? Learn more on their website: graphql.org Check it out \ud83d\udc40 You can see our GraphQL Schema documentation and try it out live on our GraphiQL browser . coursecake.tisuela.com/api/graphql is another Web API endpoint (it is not RESTful) for queries via GraphQL. Note that you will need to use POST for every request. \ud83d\udd0d Find out more about sending requests to a GraphQL server","title":"GraphQL"},{"location":"GraphQL/#what-is-graphql","text":"\ud83d\udcc8 GraphQL is a query language for APIs. It allows for more dynamic, specific queries, helping CourseCake give you the information you need. However, the kind of requests you will have to make are more complex. New to GraphQL? Learn more on their website: graphql.org","title":"What is GraphQL?"},{"location":"GraphQL/#check-it-out","text":"\ud83d\udc40 You can see our GraphQL Schema documentation and try it out live on our GraphiQL browser . coursecake.tisuela.com/api/graphql is another Web API endpoint (it is not RESTful) for queries via GraphQL. Note that you will need to use POST for every request. \ud83d\udd0d Find out more about sending requests to a GraphQL server","title":"Check it out"},{"location":"REST-API/","text":"coursecake.tisuela.com/api/v1 You can check out CourseCake online ! Try out our REST or GraphQL endpoint. Take a look at comprehensive documentation here GraphQL - Beyond REST coursecake.tisuela.com/api/graphql is another Web API endpoint (it is not RESTful) for queries via GraphQL. GraphQL is a query language for APIs. It allows for more dynamic, specific queries, helping CourseCake give you the information you need. However, the kind of requests you will have to make are more complex. You can see our GraphQL Schema documentation and try it out live on our GraphiQL browser . New to GraphQL? Learn more on their website: graphql.org Quickstart Lets search for all the courses in a university. Note that we specify a limit in each request; the default limit is 50 results per request. This is to prevent API abuse. Python You will need the requests library. To install, run on you command line: python -m pip install requests import requests # URL to the Search API endpoint url = \"http://coursecake.tisuela.com/api/v1/courses/search/uci\" # send request response = requests.get(url, params=search_params) # view body of response print(response.text) # get the courses JSON courses_json = response.json() Curl curl http://coursecake.tisuela.com/api/v1/courses/search/uci Complex Examples The below examples show how to create complex, powerful queries to our REST API. Each case is the same. We search for courses at UCI that are within a department which contains ( like ) comp or bio . Next, we look for courses that have a title which does not match intro to bad course . Finally, only courses with units that equal 4 are returned. Python You will need the requests library. To install, run on you command line: python -m pip install requests import requests # URL to the Search API endpoint url = \"http://coursecake.tisuela.com/api/v1/courses/search/uci\" # search parameters for the GET request search_params = { # courses which contain \"comp\" OR \"bio\" \"department[like]\": \"comp,bio\", # courses with a title that does NOT MATCH \"intro to bad course\" \"title[not]\": \"intro to bad course\", # courses with units that EQUAL 4 \"units\": \"4\" } # send request response = requests.get(url, params=search_params) # get the courses JSON courses_json = response.json() Curl curl http://coursecake.tisuela.com/api/v1/courses/search/uci?department[like]=comp,bio&title[not]=intro%20to%20bad%20course&units=4 Try it out! Try out our API using Swagger UI here : coursecake.tisuela.com/api/v1 REST API Endpoints \ud83c\udf10 /api/v1 Full documentation Try it out! All courses \ud83d\udcda GET /courses/all/<university> Returns all courses from a university. university is determined by their domain.edu. Search Courses \ud83d\udd0d GET courses/search/<university> Query our database for courses Create complex queries \ud83d\udd2c All parameter names can be followed by [filter]. This allows for powerful queries, allowing us to query Course information for you . The default filter (applied when no filter is specified) is equals . For example: title[like]=dance Here are all valid filters: like notlike equals not You can search for multiple values for a parameter by separating them with commas: /courses/search/<university>?units=4,8&department[not]=compsci,biosci Here are the supported search parameters: Parameter Description \"id\" Course id, like DANCE 101 \"units\" \"department\" See Department codes on your school's Course Schedule \"title\" Readable name, like Intro to Dance Here's a request that returns all of UCI's in-person classes taught on Monday, Wednesday, and Friday which are not taught by Professor Badprof GET coursecake.tisuela.com/api/v1/classes/search/uci?location[notlike]=line,remote,tba&time[like]=mwf&instructor=goodprof Course vs Class \ud83d\udcda A Course is a unit of teaching that lasts a term. \ud83d\udcdd A Class is an offering of a Course . This means a Class has information for the purpose of enrollment and meaning, such as instructor, meeting times, location, and status (open or closed). A Course has many classes , however each Class belongs to exactly one Course . Course Schema \ud83d\udcda This defines a Course as a response from our REST API and GraphQL Web API, the model in database.models , and the class in scrapers.course . s Below is an example: { \"course_id\": \"string\", \"title\": \"string\", \"department\": \"string\", \"units\": 4, \"prerequisites_str\": \"string\", \"department_title\": \"string\", \"restrictions\": \"string\", \"school\": \"string\", \"provider\": \"SlugSurvival\", \"university_name\": \"UCI\", \"term_id\": \"FALL-2020-1\", \"updated\": \"2019-08-24T14:15:22Z\", \"classes\": [ ] } Class Schema \ud83d\udcdd This defines a Class as a response from our REST API and GraphQL Web API, the model in database.models , and the class (renamed CourseClass ) in scrapers.course_class . Looking at our source code, you see names like CourseClass or a_class . This naming prevents collisions with each other and with the python-built in blueprint for objects: class . Below is an example: { \"class_id\": \"string\", \"course_id\": \"string\", \"instructor\": \"string\", \"time\": \"string\", \"location\": \"string\", \"building\": \"string\", \"room\": \"string\", \"status\": \"string\", \"type\": \"string\", \"units\": 4, \"max\": 0, \"enrolled\": 0, \"waitlisted\": 0, \"requested\": 0, \"provider\": \"SlugSurvival\", \"university_name\": \"UCI\", \"term_id\": \"FALL-2020-1\", \"updated\": \"2019-08-24T14:15:22Z\", \"course\": {} } Can't find what you are looking for? The comprehensive documentation (less readable) can be found here : coursecake.tisuela.com","title":"REST API"},{"location":"REST-API/#graphql-beyond-rest","text":"coursecake.tisuela.com/api/graphql is another Web API endpoint (it is not RESTful) for queries via GraphQL. GraphQL is a query language for APIs. It allows for more dynamic, specific queries, helping CourseCake give you the information you need. However, the kind of requests you will have to make are more complex. You can see our GraphQL Schema documentation and try it out live on our GraphiQL browser . New to GraphQL? Learn more on their website: graphql.org","title":"GraphQL - Beyond REST"},{"location":"REST-API/#quickstart","text":"Lets search for all the courses in a university. Note that we specify a limit in each request; the default limit is 50 results per request. This is to prevent API abuse.","title":"Quickstart"},{"location":"REST-API/#python","text":"You will need the requests library. To install, run on you command line: python -m pip install requests import requests # URL to the Search API endpoint url = \"http://coursecake.tisuela.com/api/v1/courses/search/uci\" # send request response = requests.get(url, params=search_params) # view body of response print(response.text) # get the courses JSON courses_json = response.json()","title":"Python"},{"location":"REST-API/#curl","text":"curl http://coursecake.tisuela.com/api/v1/courses/search/uci","title":"Curl"},{"location":"REST-API/#complex-examples","text":"The below examples show how to create complex, powerful queries to our REST API. Each case is the same. We search for courses at UCI that are within a department which contains ( like ) comp or bio . Next, we look for courses that have a title which does not match intro to bad course . Finally, only courses with units that equal 4 are returned.","title":"Complex Examples"},{"location":"REST-API/#python_1","text":"You will need the requests library. To install, run on you command line: python -m pip install requests import requests # URL to the Search API endpoint url = \"http://coursecake.tisuela.com/api/v1/courses/search/uci\" # search parameters for the GET request search_params = { # courses which contain \"comp\" OR \"bio\" \"department[like]\": \"comp,bio\", # courses with a title that does NOT MATCH \"intro to bad course\" \"title[not]\": \"intro to bad course\", # courses with units that EQUAL 4 \"units\": \"4\" } # send request response = requests.get(url, params=search_params) # get the courses JSON courses_json = response.json()","title":"Python"},{"location":"REST-API/#curl_1","text":"curl http://coursecake.tisuela.com/api/v1/courses/search/uci?department[like]=comp,bio&title[not]=intro%20to%20bad%20course&units=4","title":"Curl"},{"location":"REST-API/#try-it-out","text":"Try out our API using Swagger UI here : coursecake.tisuela.com/api/v1","title":"Try it out!"},{"location":"REST-API/#rest-api-endpoints","text":"\ud83c\udf10 /api/v1 Full documentation Try it out!","title":"REST API Endpoints"},{"location":"REST-API/#all-courses","text":"\ud83d\udcda GET /courses/all/<university> Returns all courses from a university. university is determined by their domain.edu.","title":"All courses"},{"location":"REST-API/#search-courses","text":"\ud83d\udd0d GET courses/search/<university> Query our database for courses","title":"Search Courses"},{"location":"REST-API/#create-complex-queries","text":"\ud83d\udd2c All parameter names can be followed by [filter]. This allows for powerful queries, allowing us to query Course information for you . The default filter (applied when no filter is specified) is equals . For example: title[like]=dance Here are all valid filters: like notlike equals not You can search for multiple values for a parameter by separating them with commas: /courses/search/<university>?units=4,8&department[not]=compsci,biosci Here are the supported search parameters: Parameter Description \"id\" Course id, like DANCE 101 \"units\" \"department\" See Department codes on your school's Course Schedule \"title\" Readable name, like Intro to Dance Here's a request that returns all of UCI's in-person classes taught on Monday, Wednesday, and Friday which are not taught by Professor Badprof GET coursecake.tisuela.com/api/v1/classes/search/uci?location[notlike]=line,remote,tba&time[like]=mwf&instructor=goodprof","title":"Create complex queries"},{"location":"REST-API/#course-vs-class","text":"\ud83d\udcda A Course is a unit of teaching that lasts a term. \ud83d\udcdd A Class is an offering of a Course . This means a Class has information for the purpose of enrollment and meaning, such as instructor, meeting times, location, and status (open or closed). A Course has many classes , however each Class belongs to exactly one Course .","title":"Course vs Class"},{"location":"REST-API/#course-schema","text":"\ud83d\udcda This defines a Course as a response from our REST API and GraphQL Web API, the model in database.models , and the class in scrapers.course . s Below is an example: { \"course_id\": \"string\", \"title\": \"string\", \"department\": \"string\", \"units\": 4, \"prerequisites_str\": \"string\", \"department_title\": \"string\", \"restrictions\": \"string\", \"school\": \"string\", \"provider\": \"SlugSurvival\", \"university_name\": \"UCI\", \"term_id\": \"FALL-2020-1\", \"updated\": \"2019-08-24T14:15:22Z\", \"classes\": [ ] }","title":"Course Schema"},{"location":"REST-API/#class-schema","text":"\ud83d\udcdd This defines a Class as a response from our REST API and GraphQL Web API, the model in database.models , and the class (renamed CourseClass ) in scrapers.course_class . Looking at our source code, you see names like CourseClass or a_class . This naming prevents collisions with each other and with the python-built in blueprint for objects: class . Below is an example: { \"class_id\": \"string\", \"course_id\": \"string\", \"instructor\": \"string\", \"time\": \"string\", \"location\": \"string\", \"building\": \"string\", \"room\": \"string\", \"status\": \"string\", \"type\": \"string\", \"units\": 4, \"max\": 0, \"enrolled\": 0, \"waitlisted\": 0, \"requested\": 0, \"provider\": \"SlugSurvival\", \"university_name\": \"UCI\", \"term_id\": \"FALL-2020-1\", \"updated\": \"2019-08-24T14:15:22Z\", \"course\": {} }","title":"Class Schema"},{"location":"REST-API/#cant-find-what-you-are-looking-for","text":"The comprehensive documentation (less readable) can be found here : coursecake.tisuela.com","title":"Can't find what you are looking for?"},{"location":"Scrapers/","text":"Scrapers CourseCake is sliced (haha get it?) into three parts -- a standalone scraper package scrapers , a database package database to store and query what was scraped and a web app package fastapi_app to make the two former packages accessible on the web. This section will cover the usability of the standalone scraper package scrapers . Quickstart Here's a simple script to get a dictionary of all a university's courses for a specific term (only UC Irvine supported right now). Each course's course code is a key to the course information in this dictionary. from coursecake.scrapers.course_scraper import CourseScraper scraper = CourseScraper().getUciScraper() courses = scraper.scrape() instructor_of_course_30000 = courses[\"30000\"].instructor Documentation CourseScraper scrapers.course_scraper CourseScraper is the main class in which you can access all scraper classes and their functions -- you should not have to import any of the other scrapers. The long term plan -- IF this project continues -- is to have support for multiple universities by having a scraper for each university. Currently, only UC Irvine is supported. Regardless, this is the motivation behind the scrapers module, to only have to import a few classes for complete usability ( CourseScraper , Scraper , and Course ). Thus, CourseScraper has methods to return a university's specific Scraper , so you don't have to make an import for that specific school. Importing CourseScraper: from coursecake.scrapers.course_scraper import CourseScraper Get University's Scraper CourseScraper.getUciScraper() -> Scraper Returns UC Irvine's specific scraper. All specific scrapers inherit from the Scraper class, so for usability, the expected return value is a Scraper object (although a UciScraper object would also be valid and more specific). From this Scraper object you can return all of the university's courses, query specific courses, save the courses to a file, etc. All information returned from this Scraper object comes from the university's course schedule website -- it will be the latest data and you need internet connection to allow the Scraper to make requests to their website. Scraper scrapers.scraper Get all courses Scraper.scrape() -> dict Loads all of the university's courses for the latest term as a dictionary of Course , with their course code as the key. Each course is accessible by their key -- their course code (a String). For any university, this .scrape() will take around a minute to complete, since it must iterate over several pages of courses from the course schedule website to collect all courses. Example usage: scraper = CourseScraper().getUciScraper() courses = scraper.scrape() All course information is stored as a dictionary of Course . instructor_of_course_30000 = courses[\"30000\"].instructor Search specific courses Scraper.getCourses(args: dict) -> dict Get the latest course information (directly scraped from web) on courses fulfilling search criteria. Returns results as a dictionary of Course , with their course code as the key args is a dict in which you specify search parameters and their values. Keys and value formats are the same throughout all universities (currently only one, UC Irvine lol) Here are the currently supported arguments: Key Value \"code\" String \"department\" String \"instructor\" String \"breadth\" String \"starttime\" String (ex: 8:00am) \"endtime\" String (ex: 8:00am) \"title\" String \"units\" String or int You must specify one of the following parameters: code , department , instructor , or breadth Example usage: args = { \"department': \"compsci\", \"units\": 4 } scraper = CourseScraper().getUciScraper() courses = scraper.getCourses(args) Course scrapers.course A Course object holds all information you can get on a course, accessible by attributes (ex: Course.instructor ). You can easily serialize a Course using Course.__dict__ courses is a list of Course objects, ad defined in coursecake/scrapers/course.py . From the Course object, you can get obtain the course's data. Here is an example of printing some course data from courses for course in courses.values(): # This does not print out all attributes, just a select few to avoid clutter # see more in Course.__str__(self) print(course) # print the status of the course; if it is open, closed, full, etc. print(course.status)","title":"Scrapers"},{"location":"Scrapers/#scrapers","text":"CourseCake is sliced (haha get it?) into three parts -- a standalone scraper package scrapers , a database package database to store and query what was scraped and a web app package fastapi_app to make the two former packages accessible on the web. This section will cover the usability of the standalone scraper package scrapers .","title":"Scrapers"},{"location":"Scrapers/#quickstart","text":"Here's a simple script to get a dictionary of all a university's courses for a specific term (only UC Irvine supported right now). Each course's course code is a key to the course information in this dictionary. from coursecake.scrapers.course_scraper import CourseScraper scraper = CourseScraper().getUciScraper() courses = scraper.scrape() instructor_of_course_30000 = courses[\"30000\"].instructor","title":"Quickstart"},{"location":"Scrapers/#documentation","text":"","title":"Documentation"},{"location":"Scrapers/#coursescraper","text":"scrapers.course_scraper CourseScraper is the main class in which you can access all scraper classes and their functions -- you should not have to import any of the other scrapers. The long term plan -- IF this project continues -- is to have support for multiple universities by having a scraper for each university. Currently, only UC Irvine is supported. Regardless, this is the motivation behind the scrapers module, to only have to import a few classes for complete usability ( CourseScraper , Scraper , and Course ). Thus, CourseScraper has methods to return a university's specific Scraper , so you don't have to make an import for that specific school. Importing CourseScraper: from coursecake.scrapers.course_scraper import CourseScraper","title":"CourseScraper"},{"location":"Scrapers/#get-universitys-scraper","text":"CourseScraper.getUciScraper() -> Scraper Returns UC Irvine's specific scraper. All specific scrapers inherit from the Scraper class, so for usability, the expected return value is a Scraper object (although a UciScraper object would also be valid and more specific). From this Scraper object you can return all of the university's courses, query specific courses, save the courses to a file, etc. All information returned from this Scraper object comes from the university's course schedule website -- it will be the latest data and you need internet connection to allow the Scraper to make requests to their website.","title":"Get University's Scraper"},{"location":"Scrapers/#scraper","text":"scrapers.scraper","title":"Scraper"},{"location":"Scrapers/#get-all-courses","text":"Scraper.scrape() -> dict Loads all of the university's courses for the latest term as a dictionary of Course , with their course code as the key. Each course is accessible by their key -- their course code (a String). For any university, this .scrape() will take around a minute to complete, since it must iterate over several pages of courses from the course schedule website to collect all courses. Example usage: scraper = CourseScraper().getUciScraper() courses = scraper.scrape() All course information is stored as a dictionary of Course . instructor_of_course_30000 = courses[\"30000\"].instructor","title":"Get all courses"},{"location":"Scrapers/#search-specific-courses","text":"Scraper.getCourses(args: dict) -> dict Get the latest course information (directly scraped from web) on courses fulfilling search criteria. Returns results as a dictionary of Course , with their course code as the key args is a dict in which you specify search parameters and their values. Keys and value formats are the same throughout all universities (currently only one, UC Irvine lol) Here are the currently supported arguments: Key Value \"code\" String \"department\" String \"instructor\" String \"breadth\" String \"starttime\" String (ex: 8:00am) \"endtime\" String (ex: 8:00am) \"title\" String \"units\" String or int You must specify one of the following parameters: code , department , instructor , or breadth Example usage: args = { \"department': \"compsci\", \"units\": 4 } scraper = CourseScraper().getUciScraper() courses = scraper.getCourses(args)","title":"Search specific courses"},{"location":"Scrapers/#course","text":"scrapers.course A Course object holds all information you can get on a course, accessible by attributes (ex: Course.instructor ). You can easily serialize a Course using Course.__dict__ courses is a list of Course objects, ad defined in coursecake/scrapers/course.py . From the Course object, you can get obtain the course's data. Here is an example of printing some course data from courses for course in courses.values(): # This does not print out all attributes, just a select few to avoid clutter # see more in Course.__str__(self) print(course) # print the status of the course; if it is open, closed, full, etc. print(course.status)","title":"Course"}]}